// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Logboard
import Foundation
@_exported import Logboard
import Swift
extension Logboard {
  public struct Data {
    public var date: Foundation.Date
    public var level: Logboard.Logboard.Level
    public var identifier: Swift.String
    public var file: Swift.String
    public var line: Swift.Int
    public var function: Swift.String
    public var message: Swift.String
    public init?(_ data: Foundation.Data)
  }
}
extension Logboard.Data : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol LogboardAppender {
  func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, message: [Any], file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
}
public class NullAppender : Logboard.LogboardAppender {
  public init()
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, message: [Any], file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  @objc deinit
}
public class MultiAppender : Logboard.LogboardAppender {
  public var appenders: [Logboard.LogboardAppender]
  public init()
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, message: [Any], file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  @objc deinit
}
public class Logboard {
  public static let dateFormatter: Foundation.DateFormatter
  public enum Level : Swift.Int, Swift.CustomStringConvertible {
    case trace
    case debug
    case info
    case warn
    case error
    public init?(string: Swift.String)
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func with(_ identifier: Swift.String) -> Logboard.Logboard
  final public let identifier: Swift.String
  public var level: Logboard.Logboard.Level
  public var appender: Logboard.LogboardAppender
  public init(_ identifier: Swift.String)
  public func isEnabledFor(level: Logboard.Logboard.Level) -> Swift.Bool
  public func trace(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func trace(format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func debug(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func debug(format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func info(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func info(format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func warn(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func warn(format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func error(_ message: Any..., file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  public func error(format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.Int = #line)
  @objc deinit
}
public class ConsoleAppender : Logboard.LogboardAppender {
  public init()
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, message: [Any], file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  @objc deinit
}
public class SocketAppender : Logboard.LogboardAppender {
  public init()
  public func connect(_ name: Swift.String, port: Swift.Int)
  public func close()
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, message: [Any], file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  public func append(_ logboard: Logboard.Logboard, level: Logboard.Logboard.Level, format: Swift.String, arguments: Swift.CVarArg, file: Swift.StaticString, function: Swift.StaticString, line: Swift.Int)
  @objc deinit
}
extension Logboard.Logboard.Level : Swift.Equatable {}
extension Logboard.Logboard.Level : Swift.Hashable {}
extension Logboard.Logboard.Level : Swift.RawRepresentable {}
